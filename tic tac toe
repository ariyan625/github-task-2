import java.util.Scanner;

public class TicTacToe {

    // Define a 3x3 grid for the board
    static char[][] board = {{'1', '2', '3'}, 
                             {'4', '5', '6'}, 
                             {'7', '8', '9'}};

    // Print the current state of the board
    public static void printBoard() {
        System.out.println("-------------");
        for (int i = 0; i < 3; i++) {
            System.out.print("| ");
            for (int j = 0; j < 3; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println("\n-------------");
        }
    }

    // Check if a player has won
    public static boolean checkWin() {
        // Check rows, columns, and diagonals
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                return true;
            }
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                return true;
            }
        }
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            return true;
        }
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            return true;
        }
        return false;
    }

    // Check if the board is full
    public static boolean isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] != 'X' && board[i][j] != 'O') {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        char currentPlayer = 'X'; // Player X goes first
        boolean gameWon = false;

        System.out.println("Welcome to Tic Tac Toe!");
        printBoard();

        // Main game loop
        while (!gameWon && !isBoardFull()) {
            System.out.println("Player " + currentPlayer + ", enter a number to place your mark: ");
            int choice = scanner.nextInt();

            // Update the board based on player's input
            boolean validMove = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == (char) (choice + '0')) { // Convert input to char
                        board[i][j] = currentPlayer;
                        validMove = true;
                        break;
                    }
                }
                if (validMove) break;
            }

            if (!validMove) {
                System.out.println("Invalid move! Try again.");
                continue;
            }

            // Print the updated board
            printBoard();

            // Check for a win
            gameWon = checkWin();
            if (gameWon) {
                System.out.println("Player " + currentPlayer + " wins!");
                break;
            }

            // Switch player
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        }

        // If the board is full and no one has won
        if (!gameWon && isBoardFull()) {
            System.out.println("It's a draw!");
        }

        scanner.close();
    }
}
